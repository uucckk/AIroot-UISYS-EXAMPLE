<!-- 展示 -->
<div>
	<div id="container"></div>
	<@content to="ct" />
	<script>
		var _self = $(dom);
		var renderer, stats, scene, camera;
		var container = null;
		var group = null;
		var ct = [];
		function init() {
			
			container = document.getElementById( '$container' );
			scene = new ? THREE.Scene();
			
			//天空盒
			var path = "img/box/";       //设置路径
				var format = '.png';                        //设定格式
			var urls = [
			   path + 'Side'+ format,     
			   path + 'Side'+ format,
			   path + 'top' + format,
			   path + 'bottom' + format,
			   path + 'Side' + format,
			   path + 'Side' + format
			];
			var textureCube = new ? THREE.CubeTextureLoader().load( urls );

			scene.background = textureCube; //作为背景贴图
			
			
			
			
			//scene.background = new ? THREE.Color(0x222222);
			camera = new ? THREE.PerspectiveCamera( 50, _self.width() / _self.height(), 1, 1000 );
			camera.position.set( 0, 0, 100 );
			this.group = new ? THREE.Group();
			//group.castShadow = true;
			scene.add( group );
			

			//光照
			var directionalLight = new ? THREE.DirectionalLight(0xffffff, 1 );
			directionalLight.position.set( 100, 100, 100 ).normalize();
			//directionalLight.castShadow = true;
			scene.add( directionalLight );

			var ambientLight = new ? THREE.AmbientLight( 0xffffff, 0.7 );
			//ambientLight.castShadow = true;
			scene.add( ambientLight );

			
			var helper = new ? THREE.GridHelper( 160, 20 );
			group.add( helper );
			//helper.rotation.x = Math.PI / 2;
			
			
			 //生成一个坐标轴，辅助线
			var axes = new ? THREE.AxisHelper(100);
			scene.add(axes);
			//生成一个平面
			var planeGeometry = new ?THREE.PlaneGeometry(10000,10000,10,10);//平面
			//生成一个材质
			var planeMaterial = new ? THREE.MeshLambertMaterial({color:0xb4bfa1});//MeshLambertMaterial
			//生成一个网格，将平面和材质放在一个网格中，组合在一起，组成一个物体
			var plane = new ? THREE.Mesh(planeGeometry,planeMaterial);
			plane.position.x = 0;
			plane.position.y = 0;
			plane.position.z = 0;
			//plane.receiveShadow = true;//平面进行接受阴影
			//scene.add(plane);
			

			for(var i = 0;i<ct.length;i++){
				addChild(ct[i]);
			}
			
			

			renderer = new ? THREE.WebGLRenderer( {alpha:true,antialias: true } );
			//renderer.shadowMapEnabled = true;
			renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize(_self.width(), _self.height());
			container.appendChild( renderer.domElement );

			//

			var controls = new ? THREE.OrbitControls( camera, renderer.domElement );

			//

			stats = new Stats();
			//container.appendChild( stats.dom );

			animate();
			//setInterval(animate,100);
		}

		
		/**
		 * 添加sd对象
		 */
		public function addChild(obj:3DObject){
			if(obj.type == "line"){
				_addLine(group,obj);
			}else if(obj.type == "box"){
				_addChild(group,obj);
			}else if(obj.type == "text"){
				_addText(group,obj);
			}
			
		}
		
		/**
		 * 添加元素
		 */
		function _addChild( group, obj ) {
			var paths = obj.paths;
			var amounts = obj.amounts;
			var colors = obj.colors;
			var center = obj.center;
			var shape = createShape(obj.data);
			var shape3d = new ? THREE.ExtrudeBufferGeometry( shape, {
				amount: obj.depth,
				bevelEnabled: false,
				bevelSize:1,
				bevelThickness:1,
				curveSegments:12
			} );
			var material = new ? THREE.MeshLambertMaterial({//MeshLambertMaterial,MeshBasicMaterial
				color: obj.color,
				//emissive: color,
				transparent:true,
				opacity: 0.5
			});
			material.needsUpdate=true;
			var mesh = new ? THREE.Mesh( shape3d, material );
			//mesh.receiveShadow = true;
			//mesh.castShadow = true;
			//mesh.rotation.x = Math.PI;
			mesh.translateZ(obj.z);
			mesh.translateX(obj.x);
			mesh.translateY(obj.y);
			mesh.rotation.x = -Math.PI / 2;
			scene.add(mesh);
		};
		
		function _addLine(group, obj ):void{
			var colors = obj.colors;
			 //定义材质THREE.LineBasicMaterial . MeshBasicMaterial...都可以
			var material = new ?THREE.LineBasicMaterial({color:0x000000});
			// 空几何体，里面没有点的信息,不想BoxGeometry已经有一系列点，组成方形了。
			var geometry = new ?THREE.Geometry();
			// 给空白几何体添加点信息，这里写3个点，geometry会把这些点自动组合成线，面。
			var paths = [
				{x:0,y:0},
				{x:100,y:0},
				{x:100,y:100},
				{x:0,y:100},
				{x:0,y:0}
			];
			
			var p = null;
			for(var i:int = 0;i<paths.length;i++){
				p = paths[i];
				geometry.vertices.push(new ?THREE.Vector3(p.x,p.y,0));
			}
			//线构造
			var line = new ?THREE.Line(geometry,material);
			
			line.translateZ(obj.z);
			line.translateX(obj.x);
			line.translateY(obj.y);
			
			scene.add(line);
		}
		
		
		/**
		 * 创建文字标签
		 */
		function _addText(group,obj){
			initText("仓库",obj);

		}
		
		function initText( wordFont, obj){
			
			/*1、创建一个画布，记得设置画布的宽高，否则将使用默认宽高，有可能会导致图像显示变形*/
			let canvas = document.createElement("canvas");
			canvas.width = 120;
			canvas.height = 50;
			/*2、创建图形，这部分可以去看w3c canvas教程*/
			let ctx = canvas.getContext("2d");
			ctx.fillStyle = "#ffffff";
			ctx.fillRect(0,0,140,34);
			ctx.beginPath();
                ctx.font="bold 24px Microsoft YaHei";
                ctx.fillStyle="#222222";
                ctx.fillText( obj.text , 0, 26 );
			ctx.closePath();
			/*3、将canvas作为纹理，创建Sprite*/
			let texture = new ?THREE.Texture(canvas);
			texture.needsUpdate = true; //注意这句不能少
			let material = new ?THREE.SpriteMaterial({map:texture});
			let mesh = new ?THREE.Sprite(material);
			/*4、放大图片，每个精灵有自己的大小，默认情况下都是很小的，如果你不放大，基本是看不到的*/
			mesh.scale.set(5,2,1);
			scene.add(mesh);
			//mesh.position.x = 0;
			//mesh.position.y = 0;
			//mesh.position.z = 0;
			
			mesh.translateZ(obj.z - 4);
			mesh.translateX(obj.x + 4);
			mesh.translateY(obj.y + 5);
			mesh.lookAt(camera.position);
		}

		
		/**
		 * 创建shape
		 */
		function createShape(points:Array):Shape{
			var shape = new ? THREE.Shape();
			var p = null;
			if(points.length>0){
				p = points[0];
				shape.moveTo(p.x,p.y);
			}
			
			for(var i:int = 1;i<points.length;i++){
				p = points[i];
				shape.lineTo(p.x,p.y);
			}
			
			return shape;
		}
		
		function loadData(value):void{
			addChild(group,{paths:[],amounts:[4],colors:[0xabcdef],center:{ x: 0, y: 0 }});
			_addLine(group,{paths:[],amounts:[4],colors:[0xabcdef],center:{ x: 0, y: 0 }});
		}
		

		

		
		

		

		

		function animate() {

			requestAnimationFrame( animate );

			render();
			stats.update();

		}

		function render() {
			renderer.render( scene, camera );
		}
		
		public function trigger(event):void{
			camera.aspect = _self.width() / _self.height();
			camera.updateProjectionMatrix();
			renderer.setSize(_self.width(), _self.height());
		}

	</script>
</div>